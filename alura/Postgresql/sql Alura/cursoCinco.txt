SELECT * FROM alura.instrutor;

INSERT INTO alura.instrutor(nome,salario) VALUES (nome_instrutor,salario_instrutor) RETURNING id INTO id_instrutor_inserido;



DROP FUNCTION cria_instrutor;



CREATE OR REPLACE FUNCTION cria_instrutor() RETURNS TRIGGER AS $$
	DECLARE
	
	media_salarial DECIMAL;
	instrutores_recebem_menos INTEGER DEFAULT 0;
	total_de_instrutores INTEGER DEFAULT 0;
	salario DECIMAL;
	percentual DECIMAL(10,2);
	BEGIN
	 	
		SELECT AVG(alura.instrutor.salario) INTO media_salarial FROM alura.instrutor WHERE id!=NEW.id; 
		
		IF NEW.salario> media_salarial THEN
			INSERT INTO log_instrutores(informacao) VALUES (NEW.nome || ' recebe acima da média!');
			---RETURN NULL;
		END IF;
		FOR salario IN SELECT instrutor.salario FROM alura.instrutor WHERE id!=NEW.id LOOP 
			total_de_instrutores:=total_de_instrutores+1;
			IF NEW.salario>salario THEN 
				instrutores_recebem_menos:=instrutores_recebem_menos+1;
			END IF;
		END LOOP;
		percentual:=instrutores_recebem_menos::DECIMAL/total_de_instrutores::DECIMAL *100;
		INSERT INTO log_instrutores(informacao) 
		VALUES (NEW.nome || ' recebe mais que '|| percentual||' % da grade de instrutores');
		
		RETURN NEW;
	END;
$$ LANGUAGE plpgsql;


DROP TRIGGER cria_log_instrutores ON alura.instrutor;
CREATE TRIGGER cria_log_instrutores AFTER INSERT ON alura.instrutor
	FOR EACH ROW EXECUTE FUNCTION cria_instrutor();
	
	
	
	
SELECT * FROM alura.instrutor;
SELECT * FROM log_instrutores;

BEGIN;
INSERT INTO alura.instrutor(nome,salario) VALUES('Maria',17000.0);
ROLLBACK;

