CREATE TABLE aluno (
    id SERIAL PRIMARY KEY,
	primeiro_nome VARCHAR(255) NOT NULL,
	ultimo_nome VARCHAR(255) NOT NULL,
	data_nascimento DATE NOT NULL
);

CREATE TABLE categoria (
    id SERIAL PRIMARY KEY,
	nome VARCHAR(255) NOT NULL UNIQUE
);

CREATE TABLE curso (
    id SERIAL PRIMARY KEY,
	nome VARCHAR(255) NOT NULL,
	categoria_id INTEGER NOT NULL REFERENCES categoria(id)
);

CREATE TABLE aluno_curso (
	aluno_id INTEGER NOT NULL REFERENCES aluno(id),
	curso_id INTEGER NOT NULL REFERENCES curso(id),
	PRIMARY KEY (aluno_id, curso_id)
);



INSERT INTO aluno(primeiro_nome,ultimo_nome,data_nascimento)
VALUES ('Ola','Mundo','2022-07-29'),
('Alo','Mundo','2021-07-29'),
('Mundo','Ola','2020-09-19'),
('Mundo','Alo','2010-04-29'),
('Alo','Asd','2009-03-09'),
('Ola','Asd','2008-02-12'),
('Asd','Mundo','2018-01-23');

select * from aluno;
SELECT MIN(data_nascimento) FROM aluno;
SELECT MIN(data_nascimento),MAX(data_nascimento) FROM aluno;

INSERT INTO categoria(nome) VALUES ('Front-End'),('Banco de dados'), ('Programação'), ('Data Science');
select * from categoria;

INSERT INTO curso(nome,categoria_id) VALUES
	('HTML',1),
	('CSS',1),
	('JS',1),
	('PHP',3),
	('JAVA',3),
	('C++',3),
	('MySQL',2),
	('PostgreSQL',2),
	('Oracle DB',2),
	('SQL Server',2),
	('SQLite',2),
	('Pandas',4),
	('Machine Learning',4),
	('Power BI',4);
	
	
select * from curso ORDER BY categoria_id;


INSERT INTO aluno_curso VALUES 
(1,4),
(1,11),
(2,1),
(2,2),
(3,4),
(3,3),
(4,4),
(4,6),
(4,5);
INSERT INTO aluno_curso VALUES 
(1,1);


select * from aluno 
JOIN aluno_curso ON aluno_curso.aluno_id = aluno.id
JOIN curso ON aluno_curso.curso_id=curso.id;

UPDATE categoria SET nome='Ciência de Dados' WHERE id=4;


SELECT aluno.primeiro_nome AS nome,aluno.ultimo_nome AS "Sobrenome" , COUNT(curso.id) AS numero_cursos
FROM aluno
JOIN aluno_curso ON aluno_curso.aluno_id=aluno.id
JOIN curso ON aluno_curso.curso_id = curso.id
GROUP BY aluno.primeiro_nome, aluno.ultimo_nome
ORDER BY 3;


SELECT aluno.primeiro_nome AS nome,aluno.ultimo_nome AS "Sobrenome" , COUNT(aluno_curso.curso_id) AS numero_cursos
FROM aluno
JOIN aluno_curso ON aluno_curso.aluno_id=aluno.id
GROUP BY 1,2
ORDER BY 3 DESC;


SELECT * 
FROM curso
LEFT JOIN aluno_curso ON aluno_curso.curso_id = curso.id
ORDER BY 1;


SELECT curso.nome,COUNT(aluno_curso.aluno_id) AS "Total de alunos" 
FROM curso
LEFT JOIN aluno_curso ON aluno_curso.curso_id = curso.id
GROUP BY curso.nome
ORDER BY 2 DESC
LIMIT 1;


SELECT * FROM curso;
SELECT * FROM categoria;

SELECT * FROM curso WHERE categoria_id IN(1,2);

SELECT curso.nome FROM curso WHERE categoria_id IN(
SELECT id FROM categoria WHERE nome  LIKE '% de %'
);



SELECT curso.nome,
         COUNT(aluno_curso.aluno_id) numero_alunos
    FROM curso
    JOIN aluno_curso ON aluno_curso.curso_id = curso.id
GROUP BY 1
     HAVING COUNT(aluno_curso.aluno_id) > 2
ORDER BY numero_alunos DESC;
    

SELECT * FROM aluno;

SELECT (primeiro_nome || ' ' || ultimo_nome) AS nome_completo FROM aluno;

SELECT CONCAT(primeiro_nome,' ',ultimo_nome) AS nome_completo FROM aluno;


SELECT UPPER(CONCAT(' ',primeiro_nome,' ',ultimo_nome,' ')) AS nome_completo FROM aluno;
SELECT TRIM(LOWER(CONCAT(primeiro_nome,' ',ultimo_nome))) AS nome_completo FROM aluno;

SELECT TRIM(CONCAT(primeiro_nome,' ',ultimo_nome)) AS nome_completo,
NOW()::DATE AS data_atual,
data_nascimento 
FROM aluno;



SELECT TRIM(CONCAT(primeiro_nome,' ',ultimo_nome)) AS nome_completo,
(NOW()::DATE -data_nascimento) / 365 AS idade
FROM aluno;

SELECT TRIM(CONCAT(primeiro_nome,' ',ultimo_nome)) AS nome_completo,
AGE(data_nascimento) AS idade
FROM aluno;


SELECT TRIM(CONCAT(primeiro_nome,' ',ultimo_nome)) AS nome_completo,
EXTRACT(YEAR FROM AGE(data_nascimento)) AS idade
FROM aluno;

SELECT TO_CHAR(NOW(),'DD/MM/YYYY');

SELECT TO_CHAR(123.12::REAL,'999D99');


SELECT categoria FROM (
	SELECT categoria.nome AS categoria ,
	COUNT(curso.id) AS numero_cursos
	FROM categoria 
	JOIN curso ON curso.categoria_id = categoria.id
	GROUP BY categoria
) AS categoria_cursos
WHERE numero_cursos>=3;
---TABELA VIRTUAL

CREATE VIEW vw_cursos_por_categoria
AS 
SELECT categoria.nome AS categoria ,
	COUNT(curso.id) AS numero_cursos
	FROM categoria 
	JOIN curso ON curso.categoria_id = categoria.id
	GROUP BY categoria;
---VIEW 

SELECT * FROM vw_cursos_por_categoria;


SELECT categoria FROM vw_cursos_por_categoria 
 AS categoria_cursos
WHERE numero_cursos>=3;

CREATE VIEW vw_curso_de_programacao as SELECT nome FROM curso WHERE categoria_id=2;

select * from vw_curso_de_programacao;

SELECT categoria.id AS categoria_id,
vw_cursos_por_categoria.* 
FROM vw_cursos_por_categoria
JOIN categoria ON categoria.nome=vw_cursos_por_categoria.categoria;






