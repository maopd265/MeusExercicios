# -*- coding: utf-8 -*-
"""Carga de Dataset Diabetes.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gB0NItaiqFWqVgYd7eVgcjdntOSn3iWx

# Universidade de Caxias do Sul
# Fundamentos de Inteligência Artificial
## Carga de dataset
"""

# Importaçoes iniciais 
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.model_selection import train_test_split
from sklearn.model_selection import cross_val_predict
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix
from sklearn import tree
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sb

# from google.colab import files

arquivo = files.upload()

#https://github.com/plotly/datasets/blob/master/diabetes.csv
diabetes = pd.read_csv('diabetes.csv')
diabetes.head()

X = diabetes.values[:, :8]
print(X)
print('--------')
print('Ordem das colunas:', diabetes.columns)

y = diabetes.values[:,8]
print(y)

"""# Método de treinamento da árvore de decisão"""

tree = DecisionTreeClassifier(max_depth = 2)
tree.fit(X,y)



"""# Gera matriz de confusão"""

import seaborn as sb
predictions = cross_val_predict (tree,X,y,cv=3)
cf = confusion_matrix(y,predictions)
lbl1=['setosa', 'versicolor', 'virginica']
lbl2 = ['setosa', 'versicolor', 'virginica']
sb.heatmap(cf,annot=True,cmap="Greens", fmt="d",xticklabels=lbl1,yticklabels=lbl2)



"""# Cálculo da acurácia"""

print(accuracy_score(y,predictions)*100)



"""# Resultados das Métricas de Avaliação por Classe"""

from sklearn.metrics import classification_report
print(classification_report(y,predictions))



"""# Visualize a Árvore de Decisão

"""

plot_tree(tree, filled=True, fontsize=9)
plt.show()