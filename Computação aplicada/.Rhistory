}
do.call(grid.arrange,c(p,ncol=3))
library(gridExtra)
library(ggplot2)
p = list()
for(i in 1:3){
p[[i]] = ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(legend.position="", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
library(gridExtra)
library(ggplot2)
p = list()
for(i in 4:6){
p[[i]] = ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(legend.position="", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
library(gridExtra)
library(ggplot2)
p = list()
for(i in 7:9){
p[[i]] = ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(legend.position="", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
library(gridExtra)
library(ggplot2)
p = list()
for(i in 10:12){
p[[i]] = ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(legend.position="", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
library(gridExtra)
library(ggplot2)
p = list()
for(i in 16:16){
p[[i]] =  ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(axis.text.x = element_text(angle = 90, colour = "black", size = 8),legend.position="",legend.direction = "horizontal", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
p = list()
for(i in 16:16){
p[[i]] =  ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(axis.text.x = element_text(angle = 90, colour = "black", size = 8),legend.position="",legend.direction = "horizontal", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
p = list()
for(i in 16:16){
p[[i]] =  ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(axis.text.x = element_text(angle = 90, colour = "black", size = 8),legend.position="",legend.direction = "horizontal", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
p = list()
for(i in 16:16){
p[[i]] =  ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(axis.text.x = element_text(angle = 90, colour = "black", size = 8),legend.position="",legend.direction = "horizontal", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
p = list()
for(i in 16:16){
p[[i]] =  ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(axis.text.x = element_text(angle = 90, colour = "black", size = 8),legend.position="",legend.direction = "horizontal", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
a = list()
for(i in 16:16){
a[[i]] =  ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(axis.text.x = element_text(angle = 90, colour = "black", size = 8),legend.position="",legend.direction = "horizontal", legend.title = element_blank())
}
do.call(grid.arrange,c(a,ncol=3))
p = list()
for(i in 16:16){
p[[i]] =  ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(axis.text.x = element_text(angle = 90, colour = "black", size = 8),legend.position="",legend.direction = "horizontal", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
p = list()
for(i in 16:16){
p[[i]] =  ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(axis.text.x = element_text(angle = 90, colour = "black", size = 8),legend.position="",legend.direction = "horizontal", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3,nrow=2))
p = list()
for(i in 16:16){
p[[i]] =  ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(axis.text.x = element_text(angle = 90, colour = "black", size = 8),legend.position="",legend.direction = "horizontal", legend.title = element_blank())
}
do.call(ggarrange,c(p,ncol=3,nrow=2))
library(ggpubr)
p = list()
for(i in 16:16){
p[[i]] =  ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(axis.text.x = element_text(angle = 90, colour = "black", size = 8),legend.position="",legend.direction = "horizontal", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
print("Analisando as informações obtidas no dataset Dry_Bean_Dataset.csv pode-se  visualizar as informações obtidas, padrões e comportamento das informações através dos gráficos.")
p = list()
for(i in 13:15){
p[[i]] = ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(legend.position="", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
setwd("C:\\Users\\Mauricio\\Desktop\\Material\\Atividades\\Computação aplicada")
dados = read.csv("Dry_Bean_Dataset.csv",sep=";",dec=",")
str(dados)
##Para obter os nomes das colunas, deve-se utilizar a funÃ§Ã£o names()
names(dados)
#InformaÃ§Ãµes acerca das dimensÃµes da estrutura
ncol(dados)
nrow(dados)
dim(dados)
for (i in 1:17) {
print(dados[0,i])
}
#print(dados$Class)
dados$Class = factor(c(dados$Class))
summary(dados$Class)
length(summary(dados$Class))
summary(dados$Class)
barplot(summary(dados$Class),names.arg = c("Brbnya", "Bombay", "Cali", "Dmason", "Horoz", "Seker", "Sira"),col="darkred")
View(dados)
#boxplot(summary(dados$Class))
#boxplot com todas variaveis
# boxplot(dados$Area)
# boxplot(dados$Perimeter)
# boxplot(dados$MajorAxisLength)
# boxplot(dados$MinorAxisLength)
# boxplot(dados$AspectRation)
# boxplot(dados$Eccentricity)
# boxplot(dados$ConvexArea)
# boxplot(dados$EquivDiameter)
# boxplot(dados$Extent)
# boxplot(dados$Solidity)
# boxplot(dados$roundness)
# boxplot(dados$Compactness)
# boxplot(dados$ShapeFactor1)
# boxplot(dados$ShapeFactor2)
# boxplot(dados$ShapeFactor3)
# boxplot(dados$ShapeFactor4)
# boxplot(dados$Class)
for (i in 1:17) {
print(colnames(dados[i]))
}
for (i in 1:17) {
boxplot(dados[,colnames(dados[i])])
}
#variaveis sem outliers
boxplot(dados$ShapeFactor2)
boxplot(dados$Class)
outliers=which(dados$Area %in% boxplot.stats(dados$Area)$out)
print(paste("Total de outliers eh ",length(outliers)))
print(paste("Sem os outliers ficaria com ",length(dados$Area)-length(outliers)))
#print(outliers)
outliers=which(dados$Perimeter %in% boxplot.stats(dados$Perimeter)$out)
print(paste("Total de outliers eh ",length(outliers)))
print(paste("Sem os outliers ficaria com ",length(dados$Perimeter)-length(outliers)))
#print(outliers)
outliers=which(dados$MajorAxisLength %in% boxplot.stats(dados$MajorAxisLength)$out)
print(paste("Total de outliers eh ",length(outliers)))
print(paste("Sem os outliers ficaria com ",length(dados$MajorAxisLength)-length(outliers)))
#print(outliers)
outliers=which(dados$MinorAxisLength %in% boxplot.stats(dados$MinorAxisLength)$out)
print(paste("Total de outliers eh ",length(outliers)))
print(paste("Sem os outliers ficaria com ",length(dados$MinorAxisLength)-length(outliers)))
#print(outliers)
outliers=which(dados$AspectRation %in% boxplot.stats(dados$AspectRation)$out)
print(paste("Total de outliers eh ",length(outliers)))
print(paste("Sem os outliers ficaria com ",length(dados$AspectRation)-length(outliers)))
#print(outliers)
outliers=which(dados$Eccentricity %in% boxplot.stats(dados$Eccentricity)$out)
print(paste("Total de outliers eh ",length(outliers)))
print(paste("Sem os outliers ficaria com ",length(dados$Eccentricity)-length(outliers)))
#print(outliers)
outliers=which(dados$ConvexArea %in% boxplot.stats(dados$ConvexArea)$out)
print(paste("Total de outliers eh ",length(outliers)))
print(paste("Sem os outliers ficaria com ",length(dados$ConvexArea)-length(outliers)))
#print(outliers)
outliers=which(dados$EquivDiameter %in% boxplot.stats(dados$EquivDiameter)$out)
print(paste("Total de outliers eh ",length(outliers)))
print(paste("Sem os outliers ficaria com ",length(dados$EquivDiameter)-length(outliers)))
#print(outliers)
outliers=which(dados$Extent %in% boxplot.stats(dados$Extent)$out)
print(paste("Total de outliers eh ",length(outliers)))
print(paste("Sem os outliers ficaria com ",length(dados$Extent)-length(outliers)))
#print(outliers)
outliers=which(dados$Solidity %in% boxplot.stats(dados$Solidity)$out)
print(paste("Total de outliers eh ",length(outliers)))
print(paste("Sem os outliers ficaria com ",length(dados$Solidity)-length(outliers)))
#print(outliers)
outliers=which(dados$roundness %in% boxplot.stats(dados$roundness)$out)
print(paste("Total de outliers eh ",length(outliers)))
print(paste("Sem os outliers ficaria com ",length(dados$roundness)-length(outliers)))
#print(outliers)
outliers=which(dados$Compactness %in% boxplot.stats(dados$Compactness)$out)
print(paste("Total de outliers eh ",length(outliers)))
print(paste("Sem os outliers ficaria com ",length(dados$Compactness)-length(outliers)))
#print(outliers)
outliers=which(dados$ShapeFactor1 %in% boxplot.stats(dados$ShapeFactor1)$out)
print(paste("Total de outliers eh ",length(outliers)))
print(paste("Sem os outliers ficaria com ",length(dados$ShapeFactor1)-length(outliers)))
#print(outliers)
outliers=which(dados$ShapeFactor2 %in% boxplot.stats(dados$ShapeFactor2)$out)
print(paste("Total de outliers eh ",length(outliers)))
print(paste("Sem os outliers ficaria com ",length(dados$ShapeFactor2)-length(outliers)))
#print(outliers)
outliers=which(dados$ShapeFactor3 %in% boxplot.stats(dados$ShapeFactor3)$out)
print(paste("Total de outliers eh ",length(outliers)))
print(paste("Sem os outliers ficaria com ",length(dados$ShapeFactor3)-length(outliers)))
#print(outliers)
outliers=which(dados$ShapeFactor4 %in% boxplot.stats(dados$ShapeFactor4)$out)
print(paste("Total de outliers eh ",length(outliers)))
print(paste("Sem os outliers ficaria com ",length(dados$ShapeFactor4)-length(outliers)))
#print(outliers)
outliers=which(dados$Class %in% boxplot.stats(dados$Class)$out)
print(paste("Total de outliers eh ",length(outliers)))
print(paste("Sem os outliers ficaria com ",length(dados$Class)-length(outliers)))
#print(outliers)
print(levels(dados$Class))
cores = c("red","green","blue","yellow","darkred","black","brown")
par(mfrow=c(1,3))
for (i in 1:16) {
boxplot(dados[,i] ~ dados$Class, col=cores, xlab="Tipo de feijão",
ylab="", main=names(dados)[i])
}
library(gridExtra)
library(ggplot2)
p = list()
for(i in 1:3){
p[[i]] = ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(legend.position="", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
p = list()
for(i in 4:6){
p[[i]] = ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(legend.position="", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
p = list()
for(i in 7:9){
p[[i]] = ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(legend.position="", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
p = list()
for(i in 10:12){
p[[i]] = ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(legend.position="", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
p = list()
for(i in 13:15){
p[[i]] = ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(legend.position="", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
p = list()
for(i in 16:16){
p[[i]] =  ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(axis.text.x = element_text(angle = 90, colour = "black", size = 8),legend.position="",legend.direction = "horizontal", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
name=c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P")
pvalue = c()
for(i in 1:16){
pvalue[i] = shapiro.test(dados[dados$Class=="SEKER",i])$p.value
}
barplot(pvalue,names.arg = name)
abline(h=0.05, col = "Red", lty = 5, lwd = 2)
pvalue = c()
for(i in 1:16){
pvalue[i] = shapiro.test(dados[dados$Class=="SEKER",i])$p.value
}
barplot(pvalue,names.arg = names(dados)[1:16])
abline(h=0.05, col = "Red", lty = 5, lwd = 2)
name=c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P")
pvalue = c()
for(i in 1:16){
pvalue[i] = shapiro.test(dados[dados$Class=="SIRA",i])$p.value
}
barplot(pvalue,names.arg = name)
abline(h=0.05, col = "Red", lty = 5, lwd = 2)
name=c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P")
pvalue = c()
for(i in 1:16){
pvalue[i] = shapiro.test(dados[dados$Class=="HOROZ",i])$p.value
}
barplot(pvalue,names.arg = name)
abline(h=0.05, col = "Red", lty = 5, lwd = 2)
name=c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P")
pvalue = c()
for(i in 1:16){
pvalue[i] = shapiro.test(dados[dados$Class=="DERMASON",i])$p.value
}
barplot(pvalue,names.arg = name)
abline(h=0.05, col = "Red", lty = 5, lwd = 2)
name=c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P")
pvalue = c()
for(i in 1:16){
pvalue[i] = shapiro.test(dados[dados$Class=="CALI",i])$p.value
}
barplot(pvalue,names.arg = name)
abline(h=0.05, col = "Red", lty = 5, lwd = 2)
name=c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P")
pvalue = c()
for(i in 1:16){
pvalue[i] = shapiro.test(dados[dados$Class=="BOMBAY",i])$p.value
}
barplot(pvalue,names.arg = name)
abline(h=0.05, col = "Red", lty = 5, lwd = 2)
name=c("A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P")
pvalue = c()
for(i in 1:16){
pvalue[i] = shapiro.test(dados[dados$Class=="BARBUNYA",i])$p.value
}
barplot(pvalue,names.arg = name)
abline(h=0.05, col = "Red", lty = 5, lwd = 2)
summary(dados$Class)
class(dados$Class)
# pairs(~Area + Perimeter + MajorAxisLength + MinorAxisLength + AspectRation , data = dados,
#        main = "Dataset Dados")
# pairs(~Eccentricity+ ConvexArea + EquivDiameter + Extent + Solidity + roundness , data = dados,
#        main = "Dataset Dados")
# pairs(~ Compactness + ShapeFactor1 +ShapeFactor2 +ShapeFactor3 +ShapeFactor4 +Class , data = dados,
#        main = "Dataset Dados")
pairs(dados[1:4], pch=(1:16)[dados$Class],
col=c("black", "red", "blue","yellow")[dados$Class],
lower.panel=NULL)
par(xpd = TRUE)
legend("bottomleft", legend=levels(dados$Class),
col=c("black", "red", "blue","yellow"), pch=1:4)
pairs(dados[4:8], pch=(1:16)[dados$Class],
col=c("black", "red", "blue","yellow")[dados$Class],
lower.panel=NULL)
par(xpd = TRUE)
legend("bottomleft", legend=levels(dados$Class),
col=c("black", "red", "blue","yellow"), pch=4:8)
pairs(dados[8:12], pch=(1:16)[dados$Class],
col=c("black", "red", "blue","yellow")[dados$Class],
lower.panel=NULL)
par(xpd = TRUE)
legend("bottomleft", legend=levels(dados$Class),
col=c("black", "red", "blue","yellow","green","darkred","gray"), pch=1:4)
pairs(dados[12:17], pch=(1:16)[dados$Class],
col=c("black", "red", "blue","yellow")[dados$Class],
lower.panel=NULL)
par(xpd = TRUE)
legend("bottomleft", legend=levels(dados$Class),
col=c("black", "red", "blue","yellow","green","darkred","gray"), pch=1:4)
print("Analisando as informações obtidas no dataset Dry_Bean_Dataset.csv pode-se  visualizar as informações obtidas, padrões e comportamento das informações através dos gráficos.")
p = list()
for(i in 1:1){
p[[i]] = ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(legend.position="top", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
p = list()
for(i in 1:1){
p[[i]] = ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(legend.position="top", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=1))
p = list()
for(i in 2:3){
p[[i]] = ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(legend.position="top", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=2))
p = list()
for(i in 2:3){
p[[i]] = ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(legend.position="", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
p = list()
for(i in 2:3){
p[[i]] = ggplot(dados, aes_string(x=names(dados)[i],fill="Class")) +
geom_density(alpha=0.5,color="darkgray") +
theme(legend.position="top", legend.title = element_blank())
}
do.call(grid.arrange,c(p,ncol=3))
library(GGally)
ggpairs(dados[,1:7],aes(colours=dados$Class,alpha=0.4))
library(GGally)
ggpairs(dados[,1:3],aes(colours=dados$Class,alpha=0.4))
library(GGally)
ggpairs(dados[,1:1],aes(colours=dados$Class,alpha=0.4))
library(GGally)
ggpairs(dados[,1:2],aes(colours=dados$Class,alpha=0.4))
library(GGally)
ggpairs(dados[,1:2],aes(colours=dados$Class,alpha=0.2))
library(GGally)
nomesDasClasses
library(GGally)
nomesDasClasses
library(GGally)
ggpairs(dados[,1:2])
library(GGally)
ggpairs(dados[,1:3])
ggpairs(dados[,1:3],aes(colour=dados$Class,alpha=0.4))
ggpairs(dados[,4:6],aes(colour=dados$Class,alpha=0.4))
ggpairs(dados[,7:9],aes(colour=dados$Class,alpha=0.4))
ggpairs(dados[,10:12],aes(colour=dados$Class,alpha=0.4))
ggpairs(dados[,13:15],aes(colour=dados$Class,alpha=0.4))
ggpairs(dados[,16],aes(colour=dados$Class,alpha=0.4))
ggpairs(dados[,16:17],aes(colour=dados$Class,alpha=0.4))
ggpairs(dados[,13:16],aes(colour=dados$Class,alpha=0.4))
ggpairs(dados[,13:15],aes(colour=dados$Class,alpha=0.4))
ggpairs(dados[,15:17],aes(colour=dados$Class,alpha=0.4))
for(i in 1:17){
print(dados[dados$Class==Seker,i])
}
for(i in 1:17){
print(dados[dados$Class==SEKER,i])
}
pairs(dados[4:8], pch=(1:16)[dados$Class],
col=c("black", "red", "blue","yellow")[dados$Class],
lower.panel=NULL)
par(xpd = TRUE)
legend("bottomleft", legend=levels(dados$Class),
col=c("black", "red", "blue","yellow","green","darkred","gray"), pch=4:8)
pairs(dados[4:8], pch=(1:16)[dados$Class],
col=c("black", "red", "blue","yellow")[dados$Class],
lower.panel=NULL)
par(xpd = TRUE)
legend("bottomleft", legend=levels(dados$Class),
col=c("black", "red", "blue","yellow","green","darkred","orange"), pch=4:8)
pairs(dados[4:8], pch=(1:16)[dados$Class],
col=c("black", "red", "blue","yellow")[dados$Class],
lower.panel=NULL)
par(xpd = TRUE)
legend("bottomleft", legend=levels(dados$Class),
col=c("black", "red", "blue","yellow","green","darkred","gray"), pch=4:8)
setwd("C:\\Users\\Mauricio\\Desktop\\Material\\Atividades\\Computação aplicada")
dados = read.csv("Dry_Bean_Dataset.csv",sep=";",dec=",")
str(dados)
dados$Class = factor(c(dados$Class))
summary(dados$Class)
barplot(summary(dados$Class),names.arg = c("Brbnya", "Bombay", "Cali", "Dmason", "Horoz", "Seker", "Sira"),col="darkred")
dados$Class = factor(c(dados$Class))
summary(dados$Class)
barplot(summary(dados$Class),names.arg = c("Brbnya", "Bombay", "Cali", "Dmason", "Horoz", "Seker", "Sira"),col="darkred")
summary(dados)
for (i in 1:17) {
print(colnames(dados[i]))
}
for (i in 1:17) {
boxplot(dados[,colnames(dados[i])])
}
score_z=scale(dados,center=T)
escorez=as.data.frame(lapply(dados[,2:16],function(y)(y-mean(y))/sd(y) ))
for (i in 1:17) {
print(colnames(dados[i]))
}
for (i in 1:17) {
boxplot(dados[,colnames(dados[i])])
}
escorez=as.data.frame(scale(dados[,2:16]))
summary(dados)
summary(escorez)
for (i in 1:17) {
print(colnames(dados[i]))
}
for (i in 1:17) {
boxplot(escorez[,colnames(dados[i])])
}
for (i in 1:17) {
print(colnames(dados[i]))
}
for (i in 1:17) {
boxplot(escorez[,colnames(escorez[i])])
}
for (i in 1:16) {
print(colnames(dados[i]))
}
for (i in 1:16) {
boxplot(escorez[,colnames(escorez[i])])
}
for (i in 1:17) {
print(colnames(dados[i]))
}
for (i in 1:17) {
boxplot(dados[,colnames(dados[i])])
}
boxplot(escorez)
