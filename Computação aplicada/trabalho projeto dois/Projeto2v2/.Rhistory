library(gridExtra)
library(ggplot2)
library(lubridate)
library(caret)
library(corrplot)
library(GGally)
library(mclust)
library(tictoc)
library(caret)
rm(list=ls())
setwd("C:\\Users\\Mauricio\\Desktop\\Material\\Atividades\\Computação aplicada\\trabalho projeto dois\\Projeto2v2\\")
dados = read.csv("Dadosv3.csv",header=T,na.strings="?",sep = ";",dec = ".")
summary(dados)
dados = na.omit(dados)
dados$class = factor(dados$class,
levels = 1:2,
labels = c("Menor500","Mais500"))
summary(dados)
dados$valor = NULL
barplot(summary(dados$class),col=c("green","blue"),ylab="NÂº de amostras",main="Class",las=2)
rotulos = dados[,6]
dados = dados[,-6]
matrizCorrelacao = cor(dados)
corrplot.mixed(matrizCorrelacao,lower.col="black")
indicesCorrelacaoForte = findCorrelation(matrizCorrelacao, cutoff=0.70)
if (length(indicesCorrelacaoForte) > 0)
dados[,indicesCorrelacaoForte] = NULL
set.seed(1)
indicesTreinamento = createDataPartition(rotulos, p = 2/3, list = FALSE)
dadosTreinamento   = dados[indicesTreinamento,]
rotulosTreinamento = rotulos[indicesTreinamento]
dadosTeste         = dados[-indicesTreinamento,]
rotulosTeste       = rotulos[-indicesTreinamento]
rm(dados)
outliers = c()
for (i in 1:length(dadosTreinamento)) {
outliers = c(outliers,which(dadosTreinamento[,i] %in% boxplot.stats(dadosTreinamento[,i])$out))
}
outliers = unique(outliers)
dadosTreinamento   = dadosTreinamento[-outliers,]
rotulosTreinamento = rotulosTreinamento[-outliers]
rm(outliers,i)
normalizacaoParametros = preProcess(dadosTreinamento,method = c("center","scale"))
dadosTreinamento = predict(normalizacaoParametros, dadosTreinamento)
dadosTeste       = predict(normalizacaoParametros, dadosTeste)
rm(normalizacaoParametros)
set.seed(1)
gmm.modelo = MclustDA(dadosTreinamento,rotulosTreinamento,verbose=FALSE)
set.seed(1)
gmm.modelo.componentes = MclustDA(dadosTreinamento,
rotulosTreinamento, 4,verbose=FALSE)
set.seed(1)
gmm.modelo.modeloVVI = MclustDA(dadosTreinamento, rotulosTreinamento,
modelNames = c("VVI"),verbose=FALSE)
set.seed(1)
gmm.modelo.modeloVVV = MclustDA(dadosTreinamento,
rotulosTreinamento,
modelNames = c("VVV"),verbose=FALSE)
library(doParallel)
numeroCores = detectCores(logical = FALSE)
clusters = makePSOCKcluster(numeroCores)
registerDoParallel(clusters)
tic("Treinamento Rede Neural")
set.seed(1)
paramsTreinamento = trainControl(classProbs = TRUE)
tic("mlp")
mlp.modelo = train(dadosTreinamento, rotulosTreinamento,
trControl = paramsTreinamento,
method="mlp")
library(gridExtra)
library(ggplot2)
library(lubridate)
library(caret)
library(corrplot)
library(GGally)
library(mclust)
library(tictoc)
library(caret)
rm(list=ls())
setwd("C:\\Users\\Mauricio\\Desktop\\Material\\Atividades\\Computação aplicada\\trabalho projeto dois\\Projeto2v2\\")
dados = read.csv("Dadosv3.csv",header=T,na.strings="?",sep = ";",dec = ".")
summary(dados)
dados = na.omit(dados)
dados$class = factor(dados$class,
levels = 1:2,
labels = c("Menor500","Mais500"))
summary(dados)
dados$valor = NULL
barplot(summary(dados$class),col=c("green","blue"),ylab="NÂº de amostras",main="Class",las=2)
rotulos = dados[,6]
dados = dados[,-6]
matrizCorrelacao = cor(dados)
corrplot.mixed(matrizCorrelacao,lower.col="black")
indicesCorrelacaoForte = findCorrelation(matrizCorrelacao, cutoff=0.70)
if (length(indicesCorrelacaoForte) > 0)
dados[,indicesCorrelacaoForte] = NULL
set.seed(1)
indicesTreinamento = createDataPartition(rotulos, p = 2/3, list = FALSE)
dadosTreinamento   = dados[indicesTreinamento,]
rotulosTreinamento = rotulos[indicesTreinamento]
dadosTeste         = dados[-indicesTreinamento,]
rotulosTeste       = rotulos[-indicesTreinamento]
rm(dados)
outliers = c()
for (i in 1:length(dadosTreinamento)) {
outliers = c(outliers,which(dadosTreinamento[,i] %in% boxplot.stats(dadosTreinamento[,i])$out))
}
outliers = unique(outliers)
dadosTreinamento   = dadosTreinamento[-outliers,]
rotulosTreinamento = rotulosTreinamento[-outliers]
rm(outliers,i)
normalizacaoParametros = preProcess(dadosTreinamento,method = c("center","scale"))
dadosTreinamento = predict(normalizacaoParametros, dadosTreinamento)
dadosTeste       = predict(normalizacaoParametros, dadosTeste)
rm(normalizacaoParametros)
set.seed(1)
gmm.modelo = MclustDA(dadosTreinamento,rotulosTreinamento,verbose=FALSE)
set.seed(1)
gmm.modelo.componentes = MclustDA(dadosTreinamento,
rotulosTreinamento, 4,verbose=FALSE)
set.seed(1)
gmm.modelo.modeloVVI = MclustDA(dadosTreinamento, rotulosTreinamento,
modelNames = c("VVI"),verbose=FALSE)
set.seed(1)
gmm.modelo.modeloVVV = MclustDA(dadosTreinamento,
rotulosTreinamento,
modelNames = c("VVV"),verbose=FALSE)
library(doParallel)
numeroCores = detectCores(logical = FALSE)
clusters = makePSOCKcluster(numeroCores)
registerDoParallel(clusters)
tic("Treinamento Rede Neural")
set.seed(1)
paramsTreinamento = trainControl(classProbs = TRUE)
tic("mlp")
mlp.modelo = train(dadosTreinamento, rotulosTreinamento,
trControl = paramsTreinamento,
method="mlp")
gmm.predicao              = predict(gmm.modelo,dadosTreinamento)
gmm.componentes.predicao  = predict(gmm.modelo.componentes,dadosTreinamento)
gmm.modeloVVI.predicao    = predict(gmm.modelo.modeloVVI,dadosTreinamento)
gmm.modeloVVV.predicao    = predict(gmm.modelo.modeloVVV,dadosTreinamento)
mlp.predicao              = predict(mlp.modelo,dadosTreinamento)
nnet.predicao             = predict(nnet.modelo,dadosTreinamento)
gmm.predicao              = predict(gmm.modelo,dadosTreinamento)
gmm.componentes.predicao  = predict(gmm.modelo.componentes,dadosTreinamento)
gmm.modeloVVI.predicao    = predict(gmm.modelo.modeloVVI,dadosTreinamento)
gmm.modeloVVV.predicao    = predict(gmm.modelo.modeloVVV,dadosTreinamento)
mlp.predicao              = predict(mlp.modelo,dadosTreinamento)
nnet.predicao             = predict(nnet.modelo,dadosTreinamento)
gmm.predicao              = predict(gmm.modelo,dadosTreinamento)
gmm.componentes.predicao  = predict(gmm.modelo.componentes,dadosTreinamento)
gmm.modeloVVI.predicao    = predict(gmm.modelo.modeloVVI,dadosTreinamento)
gmm.modeloVVV.predicao    = predict(gmm.modelo.modeloVVV,dadosTreinamento)
mlp.predicao              = predict(mlp.modelo,dadosTreinamento)
nnet.predicao             = predict(nnet.modelo,dadosTreinamento)
gmm.predicao              = predict(gmm.modelo,dadosTreinamento)
gmm.componentes.predicao  = predict(gmm.modelo.componentes,dadosTreinamento)
gmm.modeloVVI.predicao    = predict(gmm.modelo.modeloVVI,dadosTreinamento)
gmm.modeloVVV.predicao    = predict(gmm.modelo.modeloVVV,dadosTreinamento)
mlp.predicao              = predict(mlp.modelo,dadosTreinamento)
nnet.predicao             = predict(nnet.modelo,dadosTreinamento)
gmm.predicao              = predict(gmm.modelo,dadosTeste)
gmm.componentes.predicao  = predict(gmm.modelo.componentes,dadosTeste)
gmm.modeloVVI.predicao    = predict(gmm.modelo.modeloVVI,dadosTeste)
gmm.modeloVVV.predicao    = predict(gmm.modelo.modeloVVV,dadosTeste)
mlp.predicao              = predict(mlp.modelo,dadosTeste)
nnet.predicao             = predict(nnet.modelo,dadosTeste)
